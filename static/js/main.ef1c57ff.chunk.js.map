{"version":3,"sources":["components/markdown.js","components/header.js","components/app/App.js","serviceWorker.js","theme.js","index.js"],"names":["Markdown","Grid","container","spacing","item","sm","xs","Typography","Paper","variant","TextField","style","width","minHeight","id","label","multiline","rows","defaultValue","Header","AppBar","position","Toolbar","React","Component","App","className","Button","color","target","href","Boolean","window","location","hostname","match","createMuiTheme","palette","primary","main","secondary","themeName","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAiCeA,EA9BE,WACf,OACE,6BACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACrB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAACC,EAAA,EAAD,oBACA,kBAACC,EAAA,EAAD,CAAOC,QAAQ,YACb,kBAACC,EAAA,EAAD,CACEC,MAAQ,CAACC,MAAO,OAAQC,UAAW,KACnCC,GAAG,SACHC,MAAM,iBACNC,WAAS,EACTC,KAAM,GACNC,aAAa,iBACbT,QAAQ,eAKhB,kBAACR,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGC,GAAI,IACpB,kBAACC,EAAA,EAAD,oBACA,kBAACC,EAAA,EAAD,CAAOM,GAAG,UAAUL,QAAQ,WAAYE,MAAO,CAACC,MAAO,OAAQC,UAAW,W,kECFrEM,E,uKAbX,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACjB,kBAACC,EAAA,EAAD,KACE,kBAACf,EAAA,EAAD,2BACA,kBAAC,IAAD,a,GARWgB,IAAMC,W,SCwBZC,MArBf,WAEE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MAEA,kBAACzB,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAMG,MAAI,EAACF,WAAS,GAClB,kBAACD,EAAA,EAAD,CAAMK,GAAI,EAAGD,GAAI,IACf,kBAACJ,EAAA,EAAD,CAAMK,GAAI,GAAID,GAAI,IAChB,kBAAC,EAAD,OAEJ,kBAACJ,EAAA,EAAD,CAAMK,GAAI,EAAGD,GAAI,MAGrB,kBAACsB,EAAA,EAAD,CAAQlB,QAAQ,WAAWmB,MAAM,UAAUC,OAAO,SAASC,KAAK,mDAAhE,wBCZcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCVSC,cAAe,CAAEC,QANhB,CACdC,QAAS,CAAEC,KAAM,WACjBC,UAAW,CAAED,KAAM,YAIoBE,UAFvB,4BCIlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,CAAeC,MAAOA,GACpB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SFmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ef1c57ff.chunk.js","sourcesContent":["import React from 'react';\nimport {Grid, Paper, TextField, Typography, sizing} from '@material-ui/core'\n\nconst Markdown = () => {\n  return (\n    <div>\n      <Grid container spacing={4}>\n          <Grid item sm={6} xs={12}>\n            <Typography>HTML Output</Typography>\n            <Paper variant=\"outlined\">\n              <TextField\n                style= {{width: \"100%\", minHeight: 600}}\n                id=\"editor\"\n                label=\"Markdown Input\"\n                multiline\n                rows={30}\n                defaultValue=\"Enter Markdown\"\n                variant=\"outlined\"\n              />\n            </Paper>\n          </Grid>\n\n        <Grid item sm={6} xs={12}>\n          <Typography>HTML Output</Typography>\n          <Paper id=\"preview\" variant=\"outlined\"  style={{width: \"100%\", minHeight: 600}}>\n\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Markdown","import React from 'react'\nimport {AppBar, Toolbar, Typography} from '@material-ui/core'\nimport ListAltIcon from '@material-ui/icons/ListAlt';\n\n\n\nclass Header extends React.Component {\n  render() {\n\n    return (\n      <div>\n        <AppBar position=\"static\">\n        <Toolbar>\n          <Typography>Markdown Previewer</Typography>\n          <ListAltIcon />\n        </Toolbar>\n        </AppBar>\n      </div>\n    )\n  }\n}\n\nexport default Header","import React from 'react';\nimport './App.css';\nimport Markdown from '../markdown'\nimport Header from \"../header\";\n\n\n\nimport { Grid, Button } from '@material-ui/core'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Header/>\n\n      <Grid container>\n        <Grid item container>\n          <Grid xs={0} sm={1}/>\n            <Grid xs={12} sm={10}>\n              <Markdown />\n            </Grid>\n          <Grid xs={0} sm={1}/>\n        </Grid>\n      </Grid>\n      <Button variant=\"outlined\" color=\"primary\" target=\"_blank\" href=\"https://github.com/loschenbd/markdown-previewer\">View Codebase here</Button>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst palette = {\n  primary: { main: '#3B7C4F' },\n  secondary: { main: '#5D9EAE' }\n};\nconst themeName = 'Goblin Hippie Blue Hawk';\n\nexport default createMuiTheme({ palette, themeName });","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nimport theme from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}